name: Frontend CD

on:
  push:
    branches: [ master ]
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

env:
  NODE_VERSION: 18.18.0
  IMAGE_REPO_NAME: frontend

jobs:
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('starter/frontend/package-lock.json') }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run lint
        run: npm run lint -- --fix

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Cache npm dependencies
        id: cache-npm-test
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('starter/frontend/package-lock.json') }}
  
      - name: Install dependencies
        run: npm ci
  
      - name: Run tests
        run: CI=true npm test

  build-and-push:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('starter/frontend/package-lock.json') }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${BACKEND_API_URL} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend/k8s
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Verify Kubernetes Context
        run: kubectl config current-context

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to Kubernetes
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kustomize edit set image frontend=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          kustomize build | kubectl apply -f - --validate=false
